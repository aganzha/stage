so. it must be react like update -
stage changes. get another diffs and signall up brand new diffs.
when diffs are new - everything need to be rerendered.
i do not whant that. so, instead, it need to walk through new
diff and copy all existent views, to new ones right?

1. it need to separate render_status to initial and existent to avoid inserting labels!
2. pass whole status to git and merge views! git must.

view copiing is also expensive... but changes are only +- some elements
+ elements
  + hunk in expanded file
    just insert
  + hunk in collapsed file
    nothing
  + file
    just insert
- elements
  - hunk in expanded file
    no hunk - no view. other will adapted  
  - file
    no file, no view.
    so! whole diffs must be passed!
    whole status! staged + unstaged.
    copy views in separate threads + signal from other threads




- adding a hunk to index is git â€¦ apply --cached -p0 --ignore-space-change -
weird.

1lol
- whats get applied???
- where is this diff stored???

- refactor cursor to every view, by selecting actual view.
do not call render on everything

- collapse when press tab on line? YES, please


- open with no diff in files. works weird

- BUG when put mouse in the end of line it does not highlighted
- put symbolic expand tag/href to expand regions with mouse

-- HUGHLIGHT for pgup/pgdown doesn not work
- put label with current repo name (relative to path the app is started)
- try to replace &mut dyn RecursiveViewContainer with type alias

- adwaita ToolbarView
- popup widnwow from current line (commit)

- open another repo in file choose dialog
- open repo under other user causeing error! handle it!

- .gitignore does not counted in gitlib2 !!!! flags : Status(IGNORED)

op


- in parallel thread, go to the source file, while read hunks and put whole file in tree sitter,
make a syntax, highlight it and put into the diff. while insert line into the buffer, paint it with tags
by the tree sitter structure
- after push add text link to mr in gitlab and github!
