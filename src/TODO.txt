TODO: cherry-pick without commit!
THOUGHT: why cherry-pick always create commit. is it required?
BUG: when copy branch in very firts line and upstream event is arrived the cursor moved to line 2. it need to rerstore cursor position
BUG: copy folder to repo. reset hard. then copy subfolder in same path to repo - no monitor evenmt
BUG: updating branches (refresh button) - it is not analogue of git remote update. it does not fetch branches from local repo (cloned clocally)
THOUGHT: scroll and highlight: highlight is called always on scroll. without changing stucture.
         skipping highlights when structure is not changed lead to blinks during scroll!
TODO: so, the refactor is:
  - it does not need to fill context  highlight lines (via collect_hunk_highlights)
    in after render. because active_lines is filled already in under_cursor!
  - same for hunk highliughts
  
so, after_cursor could be eliminated in the favour of under_cursor.
just introduce first_active_line and second_active_line to store range of lines!
  
BUG: CRITICAL: when intriduce changes in line whicj is in hunk header kill does not work! stash: broken_kill
     how to fix: it need to steps comparing hunk header: fully, and then search for same line in other hunk!
     put it on hunkheader. hunkheader must be separated type!

BUG: double click is broken
BUG: i have prepopulated branches now. when doing commit, those branches do not know about it.
     things to do:
     - when doing commit get_head is called with Head event.
       it need to refactor head in such a way that it contains all info for current branch.
       It has it already, but types are different:
       pub struct Head {
           pub oid: Oid,
           pub log_message: String,
           pub raw_message: String,
           pub branch: String,
           pub view: View,
           pub remote: bool,
       }
       vs
       pub struct BranchData {
           pub name: String,
           pub refname: String,
           pub branch_type: git2::BranchType,
           pub oid: git2::Oid,
           pub log_message: String,
           pub is_head: bool,
           pub upstream_name: Option<String>,
           pub commit_dt: DateTime<FixedOffset>,
       }
       when updating head in status_view pub fn update_head
       it need to put info in branches.current_branch!
     - commit string, log_message - this must be not Strings
       but separate types like HunkLineNo!
     - Vec<BranchData> must be struct like Stashes and contain
       methods for updating current branch
     Head must be enough, cause it affects all - cherry-pick, merge, commit, reset etc

       
BUG: pulling from origin contained new commits - nothing happens. merge remote branch works, but upstream was not updated
TODO: stage via apply could see context now, for its filter!
TODO: full render on
[INFO  stage] main. state
[INFO  stage] Conflicted
[INFO  stage] main. head
[INFO  stage] main. upstream

BUG: staged conflicted file with no our parts. just
<<<<<<<<<<
===========
...
>>>>>>>>>>>
got situation when conflict is resolved, but no file staged! had to add it manually with git add

BUG: open just crteated repo (created via cargo) - panics
thread '<unnamed>' panicked at src/git.rs:592:32:
can't get head: Error { code: -9, klass: 4, message: "reference 'refs/heads/master' not found" }
stack backtrace:
thread '<unnamed>' panicked at src/git.rs:977:50:
fail revparse: Error { code: -3, klass: 4, message: "revspec 'HEAD' not found" }
thread '<unnamed>' panicked at src/git.rs:737:53:
fail revparse: Error { code: -3, klass: 4, message: "revspec 'HEAD' not found" }



BUG: wtf in conflicts merging _1 to spare? must be 1 hunk!

BUG: [DEBUG stage::status_view] update untracked! false
thread 'main' panicked at src/branches_view.rs:299:35:
called `Option::unwrap()` on a `None` value
stack backtrace:

BUG: cant kill hunk, when hunk is only No new line at end of file
TODO: so. when call update_x.. on status view finally render was called if there is something to render.
BUT, some wird artifacts with line height exists. tags????? nopes. does not helped.
the views become rendered not in place after erasing and all are fucked up.

thread 'main' panicked at src/status_view/render.rs:474:53:
called `Option::unwrap()` on a `None` value
stack backtrace:
   0: rust_begin_unwind
             at /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/panicking.rs:645:5
   1: core::panicking::panic_fmt
             at /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/panicking.rs:72:14
   2: core::panicking::panic
             at /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/panicking.rs:145:5
   3: core::option::unwrap_failed
             at /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/option.rs:1985:5
   4: core::option::Option<T>::unwrap
             at /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/option.rs:933:21
   5: stage::status_view::render::ViewContainer::erase
             at /mnt/stage/src/status_view/render.rs:474:24

BUG: when stage multiple opened files, after staginh last file all files are in staged, but hunk highlight is visible (though all hunks are collapsed in staged)
BUG: compilation got massive update in monitor. is it ok?
perhaps monioring must check index first and do not fire events? or this is just logging...

BUG: when switched from repo with conflicts to another repo - conflicts are not erased.
it need to send empty conflicts diff or better None

BUG: conflict resolution is broken. apply debug_orm and choose very first hunk. ther problem is - there are 2 conflicts inside 1 hunk!

BUG: erasing untracked while switch repos broke line heiights. see the very bottom of update untracked.
perhaps because its coming last and erasing content on top!

BUG: copy link to error with addiotional text (multiline) and paste into single line commit message. commit button does not work
untill full message is expanded
BUG: 1. Staged wrong file instead. Thats about order 2. commit view is boken. shows Staged changes and doesn not expand files
BUG: switched to stage. merge. got conflict, fixed manually but monitor does not
fixed it
[INFO  stage] track file changes "src/TODO.txt"
[DEBUG stage::status_view] track changes.................... "/home/local/REGION/au.ganzha/stage/stage/.git/" "src/TODO.txt"
[DEBUG stage::status_view] call track changes in status_view true None
[INFO  stage::git] track changes "src/TODO.txt" true
[INFO  stage] Unstaged

BUG: just create new branch and pull 
BUG: CRITICAL: apply stash for statefull tests. then copy couple of files.
files are tracked, but their content differs. There are content of othe files!
So, it is about sorting really! file insertion must be sorted!

BUG: when edit conflicted and resolving everything manually, then commit banner shown.
when unda changes in editor, conflicted restored, but commit still shown!

update_tracked_file got diff, while update_staged got Option<Diff> thats stupido!

The problem with diff is - it is empty and it is rendered!
it need to send NONE from git !!!!!!!!!!!!!!!!!!!!

Hunk has header. file has file name. Diff must have label!
So, it hasnet separate view! it operates it same way hunnk and file do!
it has kind! kind is the label!
How to erase label??? diff has view. it has line_no!
So, kill labels for diff!!!


i;ve tried before to implement upcoming hunk for reconciliation. it was fail.
now it need to implement enrich_view for label, but i need diff data for it!
how to pass? perhaps moove label inside diff! and enrich in diff inside!

TODO: squash problem - there must be no any squash. put it to enrich! erase there and there will be no flicking!
File, Hunk, Line, Label, Diff - > this must be 1 enum?
and implement render and cursor for enum.
Currently this enum is already there. It is their Kind!!!

BUG: after changing repo som how reset hard repo which was previously worked on!!!!
TODO: put all string modifications (line_no (maybe), striped length etx to separate thread)
hm. drag is triggered just on clicking. bug, but perhaps it could help detect clicks!
BUG: got unstaged from other repo somehow. perhaps pull come and update status, but there is an another repo already.
     so, each event, which update status, must came with path! if path changed - do nothing!
so. gutters are sucks because of scroll. so, it is much easier to remder line numbers an +- signs right in textview
and then on cursor move with shift modifier and drag_selection just hide them to not copy!
TODO: important! smart choose cursor position
BUG: push button is insensitive when no remote. not only on pull! just simple merge!
BUG: when got conflict in pull, it does not monitor conflicted file, so changes to fike are invisible
BUG: killing unstaged file. it need to reset hard with path. now it is going to staged


TODO: get_content replace with insert_content! and insert everything in buffer directly in container!!!!
it will be huge speed gain!!!!!!!

BUG: empty deleted line is not shown (deleted are show by text coloring, not background
TODO: changing file permission shows file in unstaged without any signs
TODO: replace all -> String to -> &str for rendering. is it possible?
TODO: reflog
TODO: squash merge
TODO: spaces!
TODO: tags!
TODO: blame - just hit b on filename and introduce Blame section (as conflicted).
each click on blame opens commit view. then in commit view each hit b on file
opens blame again!
NOW: display pull error, please
TODO: pull must choose merge vs rebase
TODO: swap find_annotated_commit in merge to reference_to_annotated_commit to get proper branch name in merge 
BUG: when close commit window  opened from stah - there are no focus in main window! any window, actually. perhaps related to cinnamon or flatpak.
BUG: checkout 3100. apply debug_linked and choose large hunk. BTW - there are 2 hunks! must be just 1!
     then manually edit file and refresh. wtf is there? deleted file?

NO BUG: pish branch stage to origin in flat-manager
[DEBUG stage::git::remote] push_transfer_progress 10 10 26765
[DEBUG stage::git::remote] updated local references "refs/remotes/origin/stage" 0000000000000000000000000000000000000000 97daef005e2e5fd73a7af3ff86978cf6a37db2fa
thats because i had 2 remotes in config both lead to refs/heads/remotes/origin
TODO: do something for remotes. maybe adding/deleting

thread '<unnamed>' panicked at src/git/remote.rs:220:22:
cant set upstream: Error { code: -1, klass: 4, message: "reference 'refs/remotes/origin/stage' is ambiguous" }


NO BUG: rename file. it is not renamed in Unstaged, though all content inside is deleted and new file is in Untracked
after staging everything works just nice.
BUG: open repo. it will be stored in settings. then delete repo! will have permanent panics of it and now way to delete.
it need delete when path is not found and show empty view!

TODO: tags, of course
THINK: is it a good idea, that each module (e.g. git::merge) whil contain its own implementation of methods
BUG: panic
thread '<unnamed>' panicked at src/git/remote.rs:317:38:
called `Result::unwrap()` on an `Err` value: Error { code: -3, klass: 7, message: "config value 'branch.provoke_conflict.remote' was not found" }
stack backtrace:
[INFO  stage] Unstaged
[INFO  stage] main. untracked
   0: rust_begin_unwind

++++++++++++++++++++++++++++++
TODO: all that must just go to private cloud, must be buildable on command. means flatpack build.
and then on client machine it must be easily updated with flatpak update. no any flatpak builders
are required. just own repo. it need to try install flatpak from remote!
so. plan. make private remote server. in container? try install flatpack inside container! and build there.
and install from that remote cloud container!
--------------------------
so, create container with https://github.com/flatpak/flat-manager
usually, it must be local server running it. it could be run locally in container.
but for public it must be run with lambda, of course.
==========================
it need to start with local builds as local server. how to save data between lambdas calls?
it uses postgres. postgres data must be stored somewhere. permamently between lambda calls.


BUG: cursor does not work sometimes on first click. thats why i killed whole file, while trying to kill just first hunk
BUG: open old_docs. expand all hunks. switch to spare_docs - garbage in textview
BUG: stage 1 file from list of files when this file is expanded. cursor become wide as several rows
BUG: SPACES are important in diff! crytical

******************************** from scratch ******************************
BUG: open branches. open log. hard reset from log. close. the branch data in branch list is not changed!
BUG: when doing any git op with result? error returned to branch, but it need also to update remo status!
to do that it need to implement object with drop interface. and inside its drop it need to call get_current_repo_status!


repo has method open_rebase


TODO: disable all branch ops in branches view during rebase!

in the rebase there is a conflict: path dc4 already applied! but it is not applied, it was cherry picked and now have another sha!
think about it:
the name is "display detached head" dc4e681f0a16dd8faad8282fc670c8b2bb738b04 in follow rebase and 06aa1eeac8e20c8f2321ee590e7d6edf32900ff5 in rebase


perhaps the problem is - it is going to stage during conflict resolution!
*********************************************************************************

TODO: TextView::extra_menu - for search and for stage/unstage/kill.
TODO: implement search with ctrl-f, ctrl-s, f3
TODO: add margins to text view in commit form
BUG: maybe related: staged 2 hunks in dn_scanner. then kill in unstaged hank. then. maybe, expand. panic in result
BUG: Crytical: garbage in text. file is invisible! garbage hunks in the end of view and they are expandable!
TODO: allow ammend to change last commit message without changes
TODO: expand-collapse all
TODO: add toast to switching branch (in general - for branch actions)
TODO: squash
BUG: stage 1 file. expand 1 unstaged hunk and view hunk highlights. they are jumped!
TODO: show spaces in diffs!
BUG: create branch. change 2 files. commit. checkout main. cherry pick 1 file from that branch - stage view is not refreshed!
looks like something with monitors! well, it need to switch monitors when switch repo, of course

TODO: disable all branch ops in branches view during rebase!

in the rebase there is a conflict: path dc4 already applied! but it is not applied, it was cherry picked and now have another sha!
think about it:
the name is "display detached head" dc4e681f0a16dd8faad8282fc670c8b2bb738b04 in follow rebase and 06aa1eeac8e20c8f2321ee590e7d6edf32900ff5 in rebase

remote is apeared (new branch) below head and cursor shifted down, but hightlight was on same line

TODO: when something panic in main thread, the next thing is panic at cant sent through channel.
perhaps recover from it?
TODO: when user is trying to stage in unstaged, show him commit confirm message!

cursor is staying on same line and its highlighted.
but content behind it changed. at this moment it need to tap cursor?
yes, thats what i did before!

TODO: attach this to errors, or rather just print to log! https://doc.rust-lang.org/std/backtrace/
TODO: rename dirty to transfered. no more dirty :)
BUG: expand does not work on first line!
BUG: expand - moves to the start.
BUG: higjlight 2 regions when set on the hunk line (from bottom)
Rc::clone() instead of .clone()

and some new lines to check, what?
- пустое представление!
- implement about popup with github issue
- stage and revert hunks and files from any commit_view
go with amend
TODO: passing window in internal list methods, but window could be obtained by root inside those methods!

TODO: rename _view.rs to _list.rs
views must be connected with each other with large linked list. list across all view
global array of text tag in buffer. each view stores indexes of self tags froms this array!
[tag, tag, tag, tag]
[0    1    0    1

BUG: after merge head is not updated! (found after push)

if remove vector fron view it could be Copy type and then it could be wrapped
in Cell and then i will not need &mut self everywhere, cause view will be by passed by &self!!!


TODO: when there is nothing to stage - open commit edit message dialog!

one

BUG: in docs. commit starting with abab does not expand last line!
6d978 - interesting commit


BUG: refresh branches must react to user login! what about pull? connect it to push/pull from branches view!
TODO: ammend!
BUG: monitors sometimes are off, when switch to other repo
BUG: panic when apply stage: thread '<unnamed>' panicked at src/git.rs:1039:10:
cant apply stash: Error { code: -22, klass: 19, message: "4 uncommitted changes exist in the index" }

loice

TODO: measure line length for each line under cursor is not effective. perhaps introduce one
more flag to view and during resize event reset those flags to perform buildup?
TODO: in branch list please show remote status somehow
BUG: conflict with file deletion. there are no our conflict!
      
thread '<unnamed>' panicked at src/git.rs:560:32:
called `Option::unwrap()` on a `None` value
!!!!!!!(deleted by us)




BUG: when kill untracked file from magit (when it was visible in stage), it remains visible and even changing repo does not help
# pull branch whithout remote

TODO: Cherry-pick - it does copy changes but does not create commit (feature?) refresh button does not cleanu state
      feature - add popup while click on state suggest cleanup. 
      
thread '<unnamed>' panicked at src/git.rs:585:21:
not yet implemented: provoke conflict


[DEBUG stage::git] push status Some("pre-receive hook declined")
       thread '<unnamed>' panicked at src/git.rs:1009:13:
       assertion failed: opt_status.is_none()
       stack backtrace:

TODO: mnemonic!
BUG: after manipulating branches stashes list is empty, and just feeling of stashes in the log
     dot emacs file also apeared in unstaged, and killing it causeing panic
     
BUG: thread '<unnamed>' panicked at src/git.rs:149:9:
     cant reverse header @@ -1 +0,0 @@
BUG: thread 'main' panicked at src/status_view/container.rs:199:14:
     can't get iter at line
     stack backtrace:

     
thread '<unnamed>' panicked at src/git.rs:1114:14:
can't get commit from ref!: thats a conflict

BUG: kill in untracked stages it + what if it is a directory???
BUG: unstaging 1 untracked unstage all untracked (perhaps in libgit)

two

so, about search - the head is does not matter. what matter is selected position.
it need to update list in such a way, that selected position is always visible
PERFORMANCE: delete ~/docs/client/WHDDemo and open app :)
Perhaps it need to put path to status. and window to context!!!!

BUG: state Revert was cleared, but refresh btn does not reflect that
thats mine conflict 2
BUG: do not know how to reproduse: after creating branch staging was not working cause ApplyFilter was empty!
BUG: during merge do not create final commit. all changes will be in staged and state will be merge.
     reset --hard from console and then refresh - there is a garbage string on the place of State
     
BUG: checkout remote branch. then checkout remote branch again!
thread '<unnamed>' panicked at src/git.rs:1043:18:
cant create branch: Error { code: -4, klass: 4, message: "failed to write reference 'refs/heads/rc-24.1204': a reference with that name already exists." }


TODO: commit ammend after post push hook
TODO: while branch list is loaded it need to show empty repr
FEATURE: add expand rows to hunks as in gitlab!
make it in HUNK row! expand before and expand after!
TODO: [TRACE stage::git] push_update_reference "refs/heads/24.2100/bugfix/au.ganzha/prevent_tobacco" Some("pre-receive hook declined")
display hook here agai
------------------------
and resolve
TODO: display killed spaces please
/usr/bin/gtk4-launch org.gtk.WidgetFactory4
/usr/bin/gtk4-launch org.gnome.Tour
cat /usr/share/applications/org.gnome.Tour.desktop


ls -la /var/lib/flatpak/app/io.gitlab.liferooter.TextPieces/
ls -la /var/lib/flatpak/exports/share/applications/ | grep Text
lrwxrwxrwx. 1 root root  125 Jun 17 18:15 io.gitlab.liferooter.TextPieces.desktop -> ../../../app/io.gitlab.liferooter.TextPieces/current/active/export/share/applications/io.gitlab.liferooter.TextPieces.desktop

so
/home/aganzha/.local/share/flatpak/exports/share must repeat /var/lib/flatpak/exports/share

ls -la /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/
vs
/var/lib/flatpak/app/io.gitlab.liferooter.TextPieces/current/active/export/share/applications/io.gitlab.liferooter.TextPieces.desktop

ouh !!!!!!!!!!!!!
cat /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/bin/com.github.aganzha.stage 
#!/bin/sh
exec /usr/bin/flatpak run --branch=master --arch=x86_64 com.github.aganzha.stage "$@"

so:
 mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/applications
 cp ~/stage/com.github.aganzha.stage.desktop /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/applications/

icon: ls -la /var/lib/flatpak/app/io.gitlab.liferooter.TextPieces/current/active/export/share/icons/hicolor/symbolic/apps/
cat /var/lib/flatpak/app/io.gitlab.liferooter.TextPieces/current/active/export/share/metainfo/io.gitlab.liferooter.TextPieces.metainfo.xml

do:
 mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share

 mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/applications

hm. looks the same:
aganzha@fedora:~/interpreter$ ls -la /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/applications
total 4
drwxr-xr-x. 1 aganzha aganzha  64 Jun 23 20:19 .
drwxr-xr-x. 1 aganzha aganzha  24 Jun 23 20:18 ..
-rw-r--r--. 1 aganzha aganzha 475 Jun 23 20:19 com.github.aganzha.stage.desktop
aganzha@fedora:~/interpreter$ ls -la /var/lib/flatpak/app/io.gitlab.liferooter.TextPieces/current/active/export/share/applications/
total 4
drwxr-xr-x. 1 root root   78 Jun 17 18:15 .
drwxr-xr-x. 1 root root   50 Jan  1  1970 ..
-rwxr-xr-x. 1 root root 1105 Jun 17 18:15 io.gitlab.liferooter.TextPieces.desktop

perhaps needs reloading?
nope. restart does not work.
perhaps it requird xml.

aganzha@fedora:~/stage$ mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons
aganzha@fedora:~/stage$ mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor
aganzha@fedora:~/stage$ mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor/symbolic
aganzha@fedora:~/stage$ mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor/symbolic/apps

mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor/scalable/
mkdir /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor/scalable/apps

cp logo.svg /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor/scalable/apps/
cp symbolic.svg /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/icons/hicolor/symbolic/apps/com.github.aganzha.stage-symbolic.svg

cd /home/aganzha/.local/share/flatpak/exports/share/applications
ln -s /home/aganzha/.local/share/flatpak/app/com.github.aganzha.stage/current/active/export/share/applications/com.github.aganzha.stage.desktop


update-desktop-database --help
update-desktop-database /home/aganzha/.local/share/flatpak/exports/share
YES!
